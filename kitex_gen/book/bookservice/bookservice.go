// Code generated by Kitex v0.9.1. DO NOT EDIT.

package bookservice

import (
	"context"
	"errors"
	book "github.com/Ricky-chen1/milvus-demo/kitex_gen/book"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Search": kitex.NewMethodInfo(
		searchHandler,
		newBookServiceSearchArgs,
		newBookServiceSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"InsertData": kitex.NewMethodInfo(
		insertDataHandler,
		newBookServiceInsertDataArgs,
		newBookServiceInsertDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	bookServiceServiceInfo                = NewServiceInfo()
	bookServiceServiceInfoForClient       = NewServiceInfoForClient()
	bookServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return bookServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return bookServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return bookServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "BookService"
	handlerType := (*book.BookService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "book",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func searchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*book.BookServiceSearchArgs)
	realResult := result.(*book.BookServiceSearchResult)
	success, err := handler.(book.BookService).Search(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBookServiceSearchArgs() interface{} {
	return book.NewBookServiceSearchArgs()
}

func newBookServiceSearchResult() interface{} {
	return book.NewBookServiceSearchResult()
}

func insertDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*book.BookServiceInsertDataArgs)
	realResult := result.(*book.BookServiceInsertDataResult)
	success, err := handler.(book.BookService).InsertData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBookServiceInsertDataArgs() interface{} {
	return book.NewBookServiceInsertDataArgs()
}

func newBookServiceInsertDataResult() interface{} {
	return book.NewBookServiceInsertDataResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Search(ctx context.Context, req *book.SearchReq) (r *book.SearchResp, err error) {
	var _args book.BookServiceSearchArgs
	_args.Req = req
	var _result book.BookServiceSearchResult
	if err = p.c.Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InsertData(ctx context.Context, req *book.InsertDataReq) (r *book.InsertDataResp, err error) {
	var _args book.BookServiceInsertDataArgs
	_args.Req = req
	var _result book.BookServiceInsertDataResult
	if err = p.c.Call(ctx, "InsertData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
